import express from 'express';
import bodyParser from 'body-parser';
import cors from 'cors';
import path from 'path';
import { fileURLToPath } from 'url';
import OpenAI from 'openai';
import { Sequelize } from 'sequelize';

const app = express();
const port = 3000;

app.use(cors());
app.use(bodyParser.json());

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

app.use(express.static(path.join(__dirname, 'public')));

// Initialize OpenAI
const openai = new OpenAI({
  apiKey: 'sk-proj-NRXojKZoTDvNsFuhUH8WT3BlbkFJCbb0Gup2YMFD3iq8lRVS'
});

// Initialize Sequelize with IPv4 address
const sequelize = new Sequelize('comment_bank', 'root', 'exhall2024', {
  host: '127.0.0.1',
  dialect: 'mysql'
});

const Category = sequelize.define('Category', {
  name: {
    type: Sequelize.STRING,
    allowNull: false
  }
}, {
  timestamps: false
});

const Subject = sequelize.define('Subject', {
  name: {
    type: Sequelize.STRING,
    allowNull: false
  }
}, {
  timestamps: false
});

const YearGroup = sequelize.define('YearGroup', {
  name: {
    type: Sequelize.STRING,
    allowNull: false
  }
}, {
  timestamps: false
});

const Comment = sequelize.define('Comment', {
  text: {
    type: Sequelize.TEXT,
    allowNull: false
  },
  categoryId: {
    type: Sequelize.INTEGER,
    references: {
      model: Category,
      key: 'id'
    }
  }
}, {
  timestamps: false
});

const CommentSubject = sequelize.define('CommentSubject', {
  commentId: {
    type: Sequelize.INTEGER,
    references: {
      model: Comment,
      key: 'id'
    }
  },
  subjectId: {
    type: Sequelize.INTEGER,
    references: {
      model: Subject,
      key: 'id'
    }
  }
}, {
  timestamps: false
});

const CommentYearGroup = sequelize.define('CommentYearGroup', {
  commentId: {
    type: Sequelize.INTEGER,
    references: {
      model: Comment,
      key: 'id'
    }
  },
  yearGroupId: {
    type: Sequelize.INTEGER,
    references: {
      model: YearGroup,
      key: 'id'
    }
  }
}, {
  timestamps: false
});

const SubjectYearGroupPrompt = sequelize.define('SubjectYearGroupPrompt', {
  subjectId: {
    type: Sequelize.INTEGER,
    references: {
      model: Subject,
      key: 'id'
    }
  },
  yearGroupId: {
    type: Sequelize.INTEGER,
    references: {
      model: YearGroup,
      key: 'id'
    }
  },
  promptPart: {
    type: Sequelize.TEXT,
    allowNull: false
  }
}, {
  timestamps: false
});

Category.hasMany(Comment, { foreignKey: 'categoryId' });
Comment.belongsTo(Category, { foreignKey: 'categoryId' });
Comment.belongsToMany(Subject, { through: CommentSubject });
Comment.belongsToMany(YearGroup, { through: CommentYearGroup });
Subject.belongsToMany(Comment, { through: CommentSubject });
YearGroup.belongsToMany(Comment, { through: CommentYearGroup });

sequelize.sync().then(() => {
  console.log('Database & tables created!');
});

// Endpoint to generate report
app.post('/generate-report', async (req, res) => {
  const { name, pronouns, subjectId, yearGroupId, additionalComments, ...categories } = req.body;

  try {
    const promptPart = await SubjectYearGroupPrompt.findOne({
      where: {
        subjectId: subjectId,
        yearGroupId: yearGroupId
      }
    });

    let prompt = promptPart ? promptPart.promptPart : 'Generate a comprehensive report for a student.';
    prompt += `\nName: ${name} (${pronouns})\n`;

    for (const [category, comment] of Object.entries(categories)) {
      if (comment) {
        prompt += `${category.replace(/-/g, ' ')}: ${comment}\n`;
      }
    }

    if (additionalComments) {
      prompt += `The following additional comments should be woven into the whole report: ${additionalComments}\n`;
    }

    const response = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 400,
      temperature: 0.7
    });

    const report = response.choices[0].message.content.trim();
    res.json({ report });
  } catch (error) {
    console.error(error);
    res.status(500).send('Error generating report');
  }
});

// Endpoint to fetch subjects
app.get('/api/subjects', async (req, res) => {
  try {
    const subjects = await Subject.findAll();
    res.json(subjects);
  } catch (error) {
    console.error(error);
    res.status(500).send('Error fetching subjects');
  }
});

// Endpoint to fetch year groups
app.get('/api/year-groups', async (req, res) => {
  try {
    const yearGroups = await YearGroup.findAll();
    res.json(yearGroups);
  } catch (error) {
    console.error(error);
    res.status(500).send('Error fetching year groups');
  }
});

// Endpoint to fetch categories and their associated comments based on subject and year group
app.get('/api/categories-comments', async (req, res) => {
  const { subjectId, yearGroupId } = req.query;
  try {
    console.log(`Fetching categories and comments for subjectId: ${subjectId}, yearGroupId: ${yearGroupId}`);
    
    const categories = await Category.findAll({
      include: {
        model: Comment,
        include: [
          {
            model: Subject,
            where: { id: subjectId },
            through: { attributes: [] }
          },
          {
            model: YearGroup,
            where: { id: yearGroupId },
            through: { attributes: [] }
          }
        ]
      }
    });
    console.log('Fetched categories:', JSON.stringify(categories, null, 2));
    res.json(categories);
  } catch (error) {
    console.error('Error fetching categories and comments:', error);
    res.status(500).send('Error fetching categories and comments');
  }
});

// Endpoint to fetch prompt part based on subject and year group
app.get('/api/prompt-part', async (req, res) => {
  const { subjectId, yearGroupId } = req.query;
  try {
    const promptPart = await SubjectYearGroupPrompt.findOne({
      where: {
        subjectId: subjectId,
        yearGroupId: yearGroupId
      }
    });
    res.json(promptPart ? promptPart.promptPart : 'Generate a comprehensive report for a student.');
  } catch (error) {
    console.error('Error fetching prompt part:', error);
    res.status(500).send('Error fetching prompt part');
  }
});

// CRUD operations for Subjects
app.post('/api/subjects', async (req, res) => {
  const { name } = req.body;
  try {
    const subject = await Subject.create({ name });
    res.json(subject);
  } catch (error) {
    console.error('Error creating subject:', error);
    res.status(500).send('Error creating subject');
  }
});

app.put('/api/subjects/:id', async (req, res) => {
  const { id } = req.params;
  const { name } = req.body;
  try {
    const subject = await Subject.findByPk(id);
    if (subject) {
      subject.name = name;
      await subject.save();
      res.json(subject);
    } else {
      res.status(404).send('Subject not found');
    }
  } catch (error) {
    console.error('Error updating subject:', error);
    res.status(500).send('Error updating subject');
  }
});

app.delete('/api/subjects/:id', async (req, res) => {
  const { id } = req.params;
  try {
    const subject = await Subject.findByPk(id);
    if (subject) {
      await subject.destroy();
      res.sendStatus(204);
    } else {
      res.status(404).send('Subject not found');
    }
  } catch (error) {
    console.error('Error deleting subject:', error);
    res.status(500).send('Error deleting subject');
  }
});

// CRUD operations for YearGroups
app.post('/api/year-groups', async (req, res) => {
  const { name } = req.body;
  try {
    const yearGroup = await YearGroup.create({ name });
    res.json(yearGroup);
  } catch (error) {
    console.error('Error creating year group:', error);
    res.status(500).send('Error creating year group');
  }
});

app.put('/api/year-groups/:id', async (req, res) => {
  const { id } = req.params;
  const { name } = req.body;
  try {
    const yearGroup = await YearGroup.findByPk(id);
    if (yearGroup) {
      yearGroup.name = name;
      await yearGroup.save();
      res.json(yearGroup);
    } else {
      res.status(404).send('Year group not found');
    }
  } catch (error) {
    console.error('Error updating year group:', error);
    res.status(500).send('Error updating year group');
  }
});

app.delete('/api/year-groups/:id', async (req, res) => {
  const { id } = req.params;
  try {
    const yearGroup = await YearGroup.findByPk(id);
    if (yearGroup) {
      await yearGroup.destroy();
      res.sendStatus(204);
    } else {
      res.status(404).send('Year group not found');
    }
  } catch (error) {
    console.error('Error deleting year group:', error);
    res.status(500).send('Error deleting year group');
  }
});

// CRUD operations for Categories
app.post('/api/categories', async (req, res) => {
  const { name } = req.body;
  try {
    const category = await Category.create({ name });
    res.json(category);
  } catch (error) {
    console.error('Error creating category:', error);
    res.status(500).send('Error creating category');
  }
});

app.put('/api/categories/:id', async (req, res) => {
  const { id } = req.params;
  const { name } = req.body;
  try {
    const category = await Category.findByPk(id);
    if (category) {
      category.name = name;
      await category.save();
      res.json(category);
    } else {
      res.status(404).send('Category not found');
    }
  } catch (error) {
    console.error('Error updating category:', error);
    res.status(500).send('Error updating category');
  }
});

app.delete('/api/categories/:id', async (req, res) => {
  const { id } = req.params;
  try {
    const category = await Category.findByPk(id);
    if (category) {
      await category.destroy();
      res.sendStatus(204);
    } else {
      res.status(404).send('Category not found');
    }
  } catch (error) {
    console.error('Error deleting category:', error);
    res.status(500).send('Error deleting category');
  }
});

// CRUD operations for Comments
app.post('/api/comments', async (req, res) => {
  const { text, categoryId, subjectId, yearGroupId } = req.body;
  try {
    const comment = await Comment.create({ text, categoryId });
    await comment.addSubject(subjectId);
    await comment.addYearGroup(yearGroupId);
    res.json(comment);
  } catch (error) {
    console.error('Error creating comment:', error);
    res.status(500).send('Error creating comment');
  }
});

app.put('/api/comments/:id', async (req, res) => {
  const { id } = req.params;
  const { text, categoryId } = req.body;
  try {
    const comment = await Comment.findByPk(id);
    if (comment) {
      comment.text = text;
      comment.categoryId = categoryId;
      await comment.save();
      res.json(comment);
    } else {
      res.status(404).send('Comment not found');
    }
  } catch (error) {
    console.error('Error updating comment:', error);
    res.status(500).send('Error updating comment');
  }
});

app.delete('/api/comments/:id', async (req, res) => {
  const { id } = req.params;
  try {
    const comment = await Comment.findByPk(id);
    if (comment) {
      await comment.destroy();
      res.sendStatus(204);
    } else {
      res.status(404).send('Comment not found');
    }
  } catch (error) {
    console.error('Error deleting comment:', error);
    res.status(500).send('Error deleting comment');
  }
});

// Move comment to another category within the selected year group/subject combination
app.post('/api/move-comment', async (req, res) => {
  const { commentId, newCategoryId } = req.body;
  try {
    const comment = await Comment.findByPk(commentId);
    if (comment) {
      comment.categoryId = newCategoryId;
      await comment.save();
      res.json(comment);
    } else {
      res.status(404).send('Comment not found');
    }
  } catch (error) {
    console.error('Error moving comment:', error);
    res.status(500).send('Error moving comment');
  }
});

app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});

